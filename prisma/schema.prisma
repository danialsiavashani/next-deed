// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  passwordHash        String
  role                Role
  company             Company?             @relation("UserCompany") // No need for onDelete here
  jobs                Job[]                @relation("UserJobs") // Jobs posted by the user (company)
  accounts            Account[]
  applications        Application[]
  companyApplications CompanyApplication[]
  saves               Save[]
  createdAt           DateTime             @default(now())
}

model Company {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation("UserCompany", fields: [userId], references: [id], onDelete: Cascade) // onDelete set here
  userId    String   @unique
  jobs      Job[]
  createdAt DateTime @default(now())
}

model Job {
  id                  String        @id @default(cuid())
  title               String
  description         String
  tagline             String
  employmentType      String
  salary              String
  level               String
  benefits            String[]
  minimumRequirements String[]
  location            String
  createdAt           DateTime      @default(now())
  company             Company       @relation(fields: [companyId], references: [id])
  companyId           String
  postedBy            User          @relation("UserJobs", fields: [postedById], references: [id])
  postedById          String
  applications        Application[]
  saves               Save[]
}

model Application {
  id        String            @id @default(cuid())
  status    ApplicationStatus @default(pending)
  job       Job               @relation(fields: [jobId], references: [id])
  jobId     String
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  resume    String
  createdAt DateTime          @default(now())
}

model CompanyApplication {
  id              String   @id @default(uuid())
  userId          String   @unique
  status          String   @default("pending") // e.g., pending, approved, rejected
  companyName     String
  applicationFile String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id])
}

model Token {
  id      String    @id @default(uuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

model Save {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
}

enum Role {
  user
  company
  admin
}

enum ApplicationStatus {
  pending
  rejected
  interview
}

enum TokenType {
  PASSWORD_RESET
  VARIFICATION
}
